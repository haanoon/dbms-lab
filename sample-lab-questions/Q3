3. Design a railway  reservation database.

    Train (train_no, date, sourse, destination, seats_available)
    Reservation(Name,date,  train no, No_of _seats, PNR(autogenerated))
    Cancellation(PNR, Name, date, train_no)

	a)Write a procedure to reservation and cancellation.(using PNR)
	b)Create a trigger to check seat availability for reservation.

 create table train(train_no int primary key,dates date,source varchar2(20),destination varchar2(20),seats_available int);
 create table reservation(pnr int primary key,name varchar2(20) not null,dates date,train_no,no_of_seats int,foreign key(train_no) references train(train_no));
 
    For auto incrementing pnr first create a sequence and create a trigger using sequence

      sequence:
        create sequence res_seq
      	start with 1
      	increment by 1
      	nomaxvalue;
      
      Trigger:
      	create or replace trigger pnr_generate
      		before insert on reservation
      		for each row
      			begin 
      				select res_seq.nextval into :new.pnr from dual;
      	end;
      	/

   create table cancellation (pnr int primary key,name varchar2(20),dates date,train_no int,foreign key (pnr) references reservation(pnr),foreign key (train_no) references train(train_no));

Precedure for reservation(res.sql):
      create or replace procedure reserve (p_name in varchar2,p_date in DATE,p_train in int,p_seats in int)	
      	AS 
      		total_seats int;
      	begin 
      		select seats_available into total_seats from train where tRain_no = p_train;
      
      		if total_seats>=p_seats then
      			insert into reservation (PNR,NAME,DATES,TRAIN_NO,NO_OF_SEATS) values (res_seq.NEXTVAL,p_name,p_date,p_train,p_seats);
      
      			update train set seats_available = seats_available - p_seats where train_no = p_train;
      
      			 DBMS_OUTPUT.PUT_LINE('Reservation of ' || p_seats || ' seats successful');
      		else
      			 DBMS_OUTPUT.PUT_LINE('Reservation unsuccesfull');	
      		end if;
      	end reserve;
      	/	 

Procedure for cancellation(cancel.sql)
       create or replace procedure cancel(c_pnr in int)
    	as
    		seats int;
    		c_train int;
    	begin
    		select train_no,no_of_seats into c_train,seats from reservation where pnr = c_pnr;
    
    		
    		delete from reservation where pnr = c_pnr;
    
    		update train set seats_available = seats_available+seats where train_no = c_train;
    
    		DBMS_OUTPUT.PUT_LINE('Cancellation succesfull');
    	end;
    /		


Trigger for checking seats available(check.sql)
    create or replace trigger check_seats
    	before insert on reservation 
    	for each row
    	declare
    		available_seats int;
    	begin
    		select seats_available into available_seats from train where train_no = :NEW.train_no;
    
    		if available_seats < :NEW.no_of_seats then
    			RAISE_APPLICATION_ERROR(-20001, 'Not enough seats available');
    		end if;
    	end;
    /			



